<?xml version="1.0"?>
<launch>
  <!-- Gazebo world to load -->
  <arg name="world" default="$(find vrx_gazebo)/worlds/sydneyregatta.world" />
  <!-- If true, run gazebo GUI -->
  <arg name="gui" default="true" />
  <!-- If true, run gazebo in verbose mode -->
  <arg name="verbose" default="false"/>
  <!-- If true, start in paused state -->
  <arg name="paused"  default="false"/>
  <!-- Start in a default namespace -->
  <arg name="namespace" default="sandwich_0"/>
  <!-- Set robot name for group model -->
  <arg name="robot_name" default="sandwich_0"/>
  <!-- Lock robot in place on start -->
  <arg name="robot_locked" default="false" />
  <!-- Control robot with joystick -->
  <arg name="joy" default="true"/>
  
  <!-- Joystick control -->
  <!--group if="$(arg joy)">
    <include file="$(find vrx_gazebo)/launch/usv_joydrive.launch">
      <arg name="namespace" value="$(arg namespace)"/>
    </include>
  </group-->

  <!-- Start Gazebo with the world file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"   value="$(arg world)"/>
    <arg name="verbose"      value="$(arg verbose)"/>
    <arg name="paused"       value="$(arg paused)"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui"          value="$(arg gui)" />
  </include>

  <group ns="robot0">
    <include file="$(find sandwich_gazebo)/launch/sandwich_multi.launch">
      <arg name="x" value="-532"/>
      <arg name="y" value="162"/>
      <arg name="z" value="0"/>
      <arg name="P" value="0"/>
      <arg name="R" value="0"/>
      <arg name="Y" value="1"/>
      <arg name="robot_locked" value="false"/>
      <arg name="namespace" value="sandwich_0"/>
      <arg name="robot_name" value="sandwich_0"/>
     </include>
     <node pkg="robot_state_publisher" type="robot_state_publisher"
	  name="robot_state_publisher">      
    </node>
    <!--node pkg="image_proc" type="image_proc" name="image_proc"
       ns="$(arg robot_name)/sensors/cameras/front_right_camera" >
     </node> 
     <node pkg="image_proc" type="image_proc" name="image_proc"
       ns="$(arg robot_name)/sensors/cameras/front_left_camera" >
     </node--> 
  </group>

  <group ns="robot1">
    <include file="$(find sandwich_gazebo)/launch/sandwich_multi.launch">
      <arg name="x" value="-532"/>
      <arg name="y" value="172"/>
      <arg name="z" value="0"/>
      <arg name="P" value="0"/>
      <arg name="R" value="0"/>
      <arg name="Y" value="1"/>
      <arg name="robot_locked" value="false"/>
      <arg name="namespace" value="sandwich_1"/>
      <arg name="robot_name" value="sandwich_1"/>
    </include>
    <node pkg="robot_state_publisher" type="robot_state_publisher"
	  name="robot_state_publisher">
    </node>
    <!--node pkg="image_proc" type="image_proc" name="image_proc"
       ns="sandwich_1/sensors/cameras/front_right_camera" >
     </node> 
     <node pkg="image_proc" type="image_proc" name="image_proc"
       ns="sandwich_1/sensors/cameras/front_left_camera" >
     </node--> 
     <!--include file="$(find optical_swarm)/launch/continuous_detection.launch">
    <arg name="camera_name"   value="$(arg robot_name)/sensors/cameras/front_left_camera"/>
  </include-->
  </group>
  
       <!-- Rabbit Visualization:Spawn a visual model to serve as marker -->
  <node name="spawn_rabbit" pkg="gazebo_ros" type="spawn_model"
        args="-x -532 -y 182 -z 1 -file $(find optical_swarm)/urdf/rabbit.urdf
              -urdf -model rabbit"/>
              
              
              <!-- Convert PointStamped messages to model states -->
  <node name="pointstamped2modelstate" pkg="optical_swarm"
	type="pointstamped2modelstate.py" output="screen">
    <param name="model_name" value="rabbit"/>
    <param name="reference_frame" value="world"/>
  </node>
  
  <node pkg="optical_swarm" type="rabbit.py" name="rabbit">
    <param name="update_rate" type="double" value="10"/>
    <param name="velocity" type="double" value="5"/>
    <rosparam file="$(find optical_swarm)/config/rabbit_waypoints_sydney.yaml" />
  </node>  
  
  
  <group>
  <!-- simple demo of apriltag_marker objects in rviz and Gazebo.
  -->

  
    <!-- upload the robot xacro/urdf to the param server -->
  <param name="robot_description" 
         command="$(find xacro)/xacro --inorder $(find optical_swarm)/urdf/april_cube_demo.xacro" />


  
  <!-- spawn the robot at xzy=(-530 185 2) -->
  <node name="spawn_april_cube_demo" pkg="gazebo_ros" type="spawn_model" 
        args="-urdf -param robot_description -x -530 -y 185 -z 2 -R 0 -P 0 -Y 0 -model april_cube" 
        respawn="false" output="screen" />

<!-- Start apriltag continuous detection -->
  
  
  
  
  
  <!-- publish world transform to tf -->
  <!--node pkg="tf" type="static_transform_publisher" 
        name="static_map_tf_publisher" args="0 0 0 0 0 0 world map 100" /-->


 <!-- publishes robot-state, reading the urdf robot model from "doro_description",
       subscribing to /joint_states and publishing to /tf -->
  <!--node pkg="robot_state_publisher" type="state_publisher" respawn="false"
        name="robot_state_publisher">
     <param name="publish_frequency" type="double" value="100.0" />
     <param name="tf_prefix" type="string" value="" />
 </node-->


  </group>
  
  <!-- Start RVIZ with config file -->
  <!--node type="rviz" name="rviz" pkg="rviz"
	args="-d $(find optical_swarm)/config/sandwich.rviz" /-->
              
</launch>


